/*
Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

public class Solution {
    
        public ListNode rotateRight(ListNode head, int k) {
	   if(head==null)
		   return null;
	   if(k==0)
		   return head;	   
        int count=1;
        ListNode p=head;
        p=p.next;
        while(p!=null){
        	p=p.next;
        	count++;     	
        }
        if(count>k){
        	return rotateRightHelp(head, count-k);
        }else{
        	k%=count;
        	if(k==0){
        		return head;
        	}else{
        		return rotateRightHelp(head, count-k);
        	}
        }
    }
   public ListNode rotateRightHelp(ListNode head,int k){
	   int count=1;
	   ListNode p=head;
	   if(count!=k){
	   p=p.next;
	   while(p!=null){
		   count++;
		   if(count==k)
			   break;
		   p=p.next;
	    }
	   }
	   ListNode newHead=p.next;
	   ListNode next=p.next;
	   p.next=null;
	   while(next.next!=null){
		   next=next.next;
	   }	  
	   next.next=head;
	   return newHead;
   }
    
}
