/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
*/
/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        int length=intervals.size();
		if(length==0){
			intervals.add(newInterval);
			return intervals; 
		}
		List<Interval>result=new ArrayList<Interval>();
		Comparator<Interval> descOrder =  new Comparator<Interval>(){  
	          
				public int compare(Interval i1, Interval i2) {
					// TODO Auto-generated method stub
					if(i1.start<i2.start)	
						return -1;
					else if(i1.start>i2.start)
						return 1;
					else{
						if(i1.end<i2.end)
							return 1;
						else 
							return -1;
					}
				}
	             
	        };  
	    intervals.add(newInterval);
	    Collections.sort(intervals,descOrder);	    
		result.add(intervals.get(0));
		for(int k=1;k<intervals.size();k++){
			Interval i=intervals.get(k);			
			Interval j=result.get(result.size()-1);//获取最后一个
			if(j.start<i.start){//i.start只可能大于等于i.start
					//相同时说明i.end<=j.end,j包括i,无需处理
				if(i.start>j.end){//两个没有交集
					result.add(i);
				}else if(i.start<=j.end&&i.end>j.end){//i.start<=j.end 两者重叠
					result.remove(result.size()-1);
					Interval l=new Interval(j.start,i.end);
					result.add(l);
				}
			}
		}
		return result;
    }
}
